def view(eye, target, up):
    """Generate the view matrix: world to eye coordinates.

        Parameters
        ----------
        eye: array of 3
            location of the camera
        target: array of 3
            a point in the direction that the center of camera is looking at
        up: array of 3
            up direction of the camera

        Returns
        -------
        M: matrix of 4 x 4
    """
    eye = np.array(eye)
    target = np.array(target)
    up = np.array(up)

    d = eye - target
    az = d / np.linalg.norm(d)
    v = up / np.linalg.norm(up)
    ax = np.cross(v, az)
    ay = np.cross(az, ax)
    Ra = np.array([ax, ay, az])

    M = np.zeros((4, 4))
    M[:3, :3] = Ra
    M[:3, 3] = - Ra @ eye
    M[3, 3] = 1
    return jnp.array(M)


def projection_fov(fovy, aspect, near, far, type='persp'):
    """Generate the projection matrix: eye to clip coordinates."""
    M = np.zeros((4, 4))

    if type == 'persp':
        f = 1 / jnp.tan(0.5 * fovy)
        M[0, 0] = f / aspect
        M[1, 1] = f
        M[2, 2] = (far + near) / (near - far)
        M[2, 3] = (2 * far * near) / (near - far)
        M[3, 2] = -1

    return jnp.array(M)


https://www.mathematik.uni-marburg.de/~thormae/lectures/graphics1/graphics_6_1_eng_web.html